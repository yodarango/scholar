import React, { useEffect, useState } from "react";
import styles from "./image_from_verse_editor.module.css";
import Portal from "../../hoc/potal";
import { CloseContent } from "../../fragments/buttons/close_content";
import { RoundLoader } from "../../fragments/chunks/round_loader";
import { Header } from "../../fragments/Typography/header";
import { Primary } from "../../fragments/buttons/primary";
import { Error } from "../../common/feedback/error";
import { Parragraph } from "../../fragments/Typography/parragraph";
import { FONT_COLOR, PRIMARY_COLOR } from "../../../constants/tokens";
import { useKeepImageToVerse } from "../../../helpers/functions/reading/use_keep_image_to_verse";
import { FinancialHelp } from "../../common/feedback/financial_help";
import { notificationMessages } from "../../../data/notification_messages";
import { Notification } from "../../fragments/popups/notification";

type TImageFromVerseEditorProps = {
   ID: string;
   img_url: string;
   prompt?: string;
   VERSE_ID: string;
   verseContent: string;
   onClose: () => void;
   onTryAgain: (verseData: any) => void;
   loading: boolean;
   error: string;
   verseCitation: string;
};

export const ImageFromVerseEditor = ({
   loading,
   img_url,
   ID,
   VERSE_ID,
   onTryAgain,
   prompt,
   error,
   verseCitation,
   verseContent,
   onClose
}: TImageFromVerseEditorProps) => {
   console.log(VERSE_ID);
   const [currentError, setCurrentError] = useState<string>("");
   const [notification, setNotification] =
      useState<{ title: string; body: string; type: string } | null>(null);
   const [imageKept, setImageKept] = useState<boolean>(false);

   const handleDownload = () => {
      const link = document.createElement("a");
      link.href = `data:image/png;base64, ${img_url}`;
      link.download = "image.png";
      link.click();
   };

   const handleTryAgain = () => {
      onTryAgain({ orgId: VERSE_ID, content: verseContent, reference: verseCitation });
   };

   const handleKeepImage = async () => {
      const { data, error, status } = await useKeepImageToVerse({ VERSE_ID });
      if (status === "done") {
         setNotification(notificationMessages.AIImageCreated);
         setImageKept(true);
      }
      if (error) {
         setCurrentError(status);
      }
   };

   useEffect(() => setCurrentError(error), [error]);

   console.log(currentError);
   return (
      <Portal>
         {notification && (
            <Notification
               title={notification.title}
               body={notification.body}
               type='2'
               cta={{ handleClose: () => setNotification(null) }}
            />
         )}
         <div className={styles.mainWrapper}>
            <div className={styles.close}>
               <CloseContent cta={{ handleClick: onClose }} />
            </div>
            {!loading && !currentError && (
               <>
                  <div className={styles.imageWrapper}>
                     <Header
                        text={`Hooray! here is what ${verseCitation} created`}
                        size='main'
                        type={2}
                     />
                     <Parragraph text={verseContent} size='main' />
                     <img
                        src={`data:image/png;base64, ${img_url}`}
                        alt='generated by AI'
                        className={styles.image}
                     />
                  </div>
                  <div className={styles.buttons}>
                     <Primary cta={{ handleClick: handleDownload }} title='Download' type='1' />
                     {!imageKept && (
                        <Primary
                           cta={{ handleClick: handleKeepImage }}
                           title='Keep'
                           customColor={{ text: PRIMARY_COLOR, button: FONT_COLOR }}
                        />
                     )}
                     <Primary cta={{ handleClick: handleTryAgain }} title='Try again' type='2' />
                  </div>
               </>
            )}
            {loading && !currentError && (
               <div className={styles.loader}>
                  <RoundLoader />
               </div>
            )}
            {currentError === "error" && !loading && (
               <div className={styles.loader}>
                  <Error />
               </div>
            )}
            {currentError === "exceedsPostCount" && !loading && (
               <div className={styles.loader}>
                  <FinancialHelp />
               </div>
            )}
         </div>
      </Portal>
   );
};
