import React, { useEffect, useState } from "react";
import styles from "./image_from_verse_editor.module.css";
import Portal from "../../hoc/potal";
import { CloseContent } from "../../fragments/buttons/close_content";
import { RoundLoader } from "../../fragments/chunks/round_loader";
import { Header } from "../../fragments/Typography/header";
import { Primary } from "../../fragments/buttons/primary";
import { Error } from "../../common/feedback/error";
import { Parragraph } from "../../fragments/Typography/parragraph";
import { FONT_COLOR, PRIMARY_COLOR } from "../../../constants/tokens";
import { useKeepImageToVerse } from "../../../helpers/functions/reading/use_keep_image_to_verse";
import { FinancialHelp } from "../../common/feedback/financial_help";
import { notificationMessages } from "../../../data/notification_messages";
import { Notification } from "../../fragments/popups/notification";
import { getImageFromBibleVerse } from "../../../helpers/functions/reading/get_image_from_Bible_verse";
import { InputPrimary } from "../../fragments/inputs/input_primary";
import { TextAreaPrimary } from "../../fragments/inputs/text_area_primary";
import { Icon } from "../../fragments/chunks/icons";

type TImageFromVerseEditorProps = {
   verseData: any;
   onClose: () => void;
};

export const ImageFromVerseEditor = ({ verseData, onClose }: TImageFromVerseEditorProps) => {
   const [notification, setNotification] =
      useState<{ title: string; body: string; type: string } | null>(null);
   const [imageKept, setImageKept] = useState<boolean>(false);
   const [createImage, setCreateImage] = useState<any>(null);
   const [loading, setLoading] = useState<string>("start");
   const [imgDescription, setImgDescription] = useState<string>("");

   const handleDownload = () => {
      const link = document.createElement("a");
      link.href = `data:image/png;base64, ${verseData.img_url}`;
      link.download = "image.png";
      link.click();
   };

   const handleKeepImage = async () => {
      const { data, error, status } = await useKeepImageToVerse({ VERSE_ID: verseData.orgId });
      if (status === "done") {
         setNotification(notificationMessages.AIImageCreated);
         setImageKept(true);
      }
      if (error) {
         setLoading(status);
      }
   };

   const handleCreateImage = async () => {
      setLoading("loading");
      setCreateImage({});
      try {
         const { data, error, status } = await getImageFromBibleVerse(verseData.orgId);
         console.log(data);
         if (data && status === "done") {
            setCreateImage(data);
            setLoading("done");
         } else if (error) {
            setLoading("error");
         }
      } catch (error) {
         setLoading("error");
         console.error(error);
      }
   };

   const handleTryAgain = () => {
      handleCreateImage();
   };

   return (
      <Portal>
         {notification && (
            <Notification
               title={notification.title}
               body={notification.body}
               type='2'
               cta={{ handleClose: () => setNotification(null) }}
            />
         )}
         <div className={styles.mainWrapper}>
            <div className={styles.close}>
               <CloseContent cta={{ handleClick: onClose }} />
            </div>

            {loading === "start" && (
               <div className={styles.topIntro}>
                  <Parragraph text={verseData.content} size='main' />
                  <TextAreaPrimary
                     maxLength={100}
                     maxHeight={100}
                     cta={{ handleCurrentValue: (val) => setImgDescription(val) }}
                     defaultValue=''
                     placeHolder='Describe your image based on the current verse (optional)'
                  />
                  <Primary cta={{ handleClick: handleCreateImage }} title='Do the magic' type='1' />
               </div>
            )}
            {loading === "done" && (
               <>
                  <div className={styles.imageWrapper}>
                     <Header
                        text={`Hooray! here is what ${verseData.reference} created`}
                        size='main'
                        type={2}
                     />
                     <img
                        src={`data:image/png;base64, ${createImage.img_url}`}
                        alt='generated by AI'
                        className={styles.image}
                     />
                  </div>
                  <div className={styles.buttons}>
                     <Primary cta={{ handleClick: handleDownload }} title='Download' type='1' />
                     {!imageKept && (
                        <Primary
                           cta={{ handleClick: handleKeepImage }}
                           title='Keep'
                           customColor={{ text: PRIMARY_COLOR, button: FONT_COLOR }}
                        />
                     )}
                     <Primary cta={{ handleClick: handleTryAgain }} title='Try again' type='2' />
                  </div>
               </>
            )}
            {loading === "loading" && (
               <div className={styles.loader}>
                  <RoundLoader />
                  <div className={styles.textFlex}>
                     <Parragraph
                        align='center'
                        text='One sec, this is hard thinking...'
                        size='small'
                     />
                     <Icon name='sparkles' />
                  </div>
               </div>
            )}
            {loading === "error" && !loading && (
               <div className={styles.loader}>
                  <Error />
               </div>
            )}
            {loading === "exceedsPostCount" && !loading && (
               <div className={styles.loader}>
                  <FinancialHelp />
               </div>
            )}
         </div>
      </Portal>
   );
};
